# -*- coding: utf-8 -*-

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import RandomForestRegressor
#from sklearn import svm
from sklearn import preprocessing
import csv
import matplotlib.pyplot as plt
import pydotplus
from IPython.display import Image
from graphviz import Digraph
from sklearn.externals.six import StringIO
from sklearn.metrics import (roc_curve, auc, accuracy_score)
import xgboost as xgb
import catboost 


# CSVファイルを読み込む
df = pd.read_csv("Jtesting.csv",header=None)
#dff = pd.read_csv("Testing14062019.csv",header=None)
dff = pd.read_csv("Testing11062019_2.csv",header=None)

#体重の選別
b = df[df.iloc[:,14] <= 120]
c = b[b.iloc[:,14] >= 70]
#d = c[c.iloc[:,13] >= 10]

bb = dff[dff.iloc[:,14] <= 120]
cc = bb[bb.iloc[:,14] >= 70]
#dd = cc[cc.iloc[:,13] >= 10]

##説明変数の 行番号、列番号を指定 #目的変数の指定
#data  = d.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]
#data  = d.iloc[:,[1,2,3,4,5,7,8,9,10,11,12,13]]
#label = d.iloc[:,[14]]

#print(data)
#print(label)

# 学習用データ
train_data  = c.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]
train_label = c.iloc[:,[14]]

#テストデータ
test_data   = cc.iloc[:,[0,1,2,3,4,5,6,7,8,9,10,11,12,13]]
test_label  = cc.iloc[:,[14]]

categorical_features_indices = np.where(train_data.dtypes != np.float)[0]
# 学習する
#clf = RandomForestRegressor()
#clf = RandomForestClassifier()
#clf = xgb.XGBClassifier()
#clf = xgb.XGBRegressor()

clf = catboost.CatBoostClassifier()
clf.fit(train_data, train_label, 
        cat_features=categorical_features_indices,
        eval_set=(train_label,test_label), 
        plot=True)



# 評価する 
predict = clf.predict(test_data)
rate_sum = 0
RMSE = 0
RMSC = 0

print("estimate" "corect\n")
for i in range(len(test_label)):
  p = int(predict[i])
  t = int(test_label.iloc[i]) 
  rate_sum += int(min(t, p) / max(t, p) * 100)#minとmaxでtかpを選択して大きいほうで割ることで1以下の数値になる
  RMSE += (p-t)**2
  RMSC += t
  print(p , t)

RMS = np.sqrt(RMSE/len(test_label))
RMSC = (RMSC/len(test_label))

print("\n seido")
print(rate_sum / len(test_label))#平均値を算出

print("\n RMSseido")
print(RMS)#RMS誤差を算出　0に近いほど良い

print("\n gosaritu")
print((RMS/RMSC)*100)


#特徴量の重要度
feature = clf.feature_importances_

#特徴量の重要度を上から順に出力する
f = pd.DataFrame({'number': range(0, len(feature)),
             'feature': feature[:]})
f2 = f.sort_values('feature',ascending=False)
f3 = f2.ix[:, 'number']

#特徴量の名前
label = df.columns[0:]

#特徴量の重要度順（降順）
indices = np.argsort(feature)[::-1]

for i in range(len(feature)):
    print(str(i + 1) + "   " + str(label[indices[i]]) + "   " + str(feature[indices[i]]))

plt.title('Feature Importance')
plt.bar(range(len(feature)),feature[indices], color='lightblue', align='center')
plt.xticks(range(len(feature)), label[indices], rotation=90)
plt.xlim([-1, len(feature)])
plt.tight_layout()
plt.show()

